Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

SELECT DISTINCT city FROM station WHERE city LIKE "A%" OR city LIKE "E%" OR city LIKE "I%" OR city LIKE "O%" OR city LIKE "U%";

=====================================================

Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

SELECT DISTINCT(CITY) FROM STATION WHERE CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' 
OR CITY LIKE '%u'; 

-----------------------------------------------------


Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

select distinct city from station 
where left(city,1) in ('a','e','i','o','u') 
and right(city, 1) in ('a','e','i','o','u');

-----------------------------------------------------------------------

Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

select distinct city from station where left(city,1) not in ('a','e','i','o','u');

------------------------------------------------------------------

Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

select distinct city from station where right(city,1) not in ('a','e','i','o','u');

============================================================================


Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.



select Name from Students where Marks>75 order by right(name,3), id;

===============================================================


Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

select name from Employee order by name asc;

===============================================================


Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months. Sort your result by ascending employee_id.

select name from Employee where salary>2000 and months<10 order by employee_id asc;

======================================================================================

https://www.hackerrank.com/challenges/the-report/problem


select if(grade>=8,name,"NULL"),grade,marks
from students
inner join
grades
on marks between min_mark and max_mark
order by grade desc, name,marks

===========================================================================================














